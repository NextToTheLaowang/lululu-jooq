/*
 * This file is generated by jOOQ.
*/
package com.java.src.lululu.business.domain.tables;


import com.java.src.lululu.business.domain.Keys;
import com.java.src.lululu.business.domain.Lw;
import com.java.src.lululu.business.domain.enums.LwAccountType;
import com.java.src.lululu.business.domain.tables.records.LwAccountRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LwAccount extends TableImpl<LwAccountRecord> {

    private static final long serialVersionUID = -1585187153;

    /**
     * The reference instance of <code>LW.lw_account</code>
     */
    public static final LwAccount LW_ACCOUNT = new LwAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LwAccountRecord> getRecordType() {
        return LwAccountRecord.class;
    }

    /**
     * The column <code>LW.lw_account.id</code>.
     */
    public final TableField<LwAccountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>LW.lw_account.create_date</code>. 创建时间
     */
    public final TableField<LwAccountRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>LW.lw_account.update_date</code>. 更新时间
     */
    public final TableField<LwAccountRecord, Timestamp> UPDATE_DATE = createField("update_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>LW.lw_account.remarks</code>. 备注信息
     */
    public final TableField<LwAccountRecord, String> REMARKS = createField("remarks", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "备注信息");

    /**
     * The column <code>LW.lw_account.del_flag</code>. 逻辑删除标记（0：显示；1：隐藏）
     */
    public final TableField<LwAccountRecord, UInteger> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "逻辑删除标记（0：显示；1：隐藏）");

    /**
     * The column <code>LW.lw_account.name</code>. 姓名
     */
    public final TableField<LwAccountRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "姓名");

    /**
     * The column <code>LW.lw_account.mobile</code>. 电话
     */
    public final TableField<LwAccountRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "电话");

    /**
     * The column <code>LW.lw_account.password</code>. 密码
     */
    public final TableField<LwAccountRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "密码");

    /**
     * The column <code>LW.lw_account.photo</code>. 照片
     */
    public final TableField<LwAccountRecord, String> PHOTO = createField("photo", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "照片");

    /**
     * The column <code>LW.lw_account.login_name</code>. 登录名
     */
    public final TableField<LwAccountRecord, String> LOGIN_NAME = createField("login_name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "登录名");

    /**
     * The column <code>LW.lw_account.sex</code>. 性别
     */
    public final TableField<LwAccountRecord, Integer> SEX = createField("sex", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "性别");

    /**
     * The column <code>LW.lw_account.address</code>. 地址
     */
    public final TableField<LwAccountRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "地址");

    /**
     * The column <code>LW.lw_account.token</code>. token
     */
    public final TableField<LwAccountRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(225), this, "token");

    /**
     * The column <code>LW.lw_account.wx_openid</code>.
     */
    public final TableField<LwAccountRecord, String> WX_OPENID = createField("wx_openid", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>LW.lw_account.birthday</code>.
     */
    public final TableField<LwAccountRecord, Date> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>LW.lw_account.shop_id</code>.
     */
    public final TableField<LwAccountRecord, Long> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>LW.lw_account.type</code>. 员工类型  店长  店员
     */
    public final TableField<LwAccountRecord, LwAccountType> TYPE = createField("type", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.java.src.lululu.business.domain.enums.LwAccountType.class), this, "员工类型  店长  店员");

    /**
     * The column <code>LW.lw_account.salt</code>.
     */
    public final TableField<LwAccountRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * Create a <code>LW.lw_account</code> table reference
     */
    public LwAccount() {
        this("lw_account", null);
    }

    /**
     * Create an aliased <code>LW.lw_account</code> table reference
     */
    public LwAccount(String alias) {
        this(alias, LW_ACCOUNT);
    }

    private LwAccount(String alias, Table<LwAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private LwAccount(String alias, Table<LwAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lw.LW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LwAccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_LW_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LwAccountRecord> getPrimaryKey() {
        return Keys.KEY_LW_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LwAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<LwAccountRecord>>asList(Keys.KEY_LW_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LwAccount as(String alias) {
        return new LwAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LwAccount rename(String name) {
        return new LwAccount(name, null);
    }
}
